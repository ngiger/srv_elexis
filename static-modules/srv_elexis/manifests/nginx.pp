# vi: set ft=ruby :
# kate: replace-tabs on; indent-width 2; indent-mode cstyle; syntax ruby
# == Class: srv_elexis
#
# Full description of class srv_elexis here.
#
# === Parameters
#
# Document parameters here.
#
# [*sample_parameter*]
#   Explanation of what this parameter affects and what it defaults to.
#   e.g. "Specify one or more upstream ntp servers as an array."
#
# === Variables
#
# Here you should define a list of variables that this module would require.
#
# [*sample_variable*]
#   Explanation of how this variable affects the funtion of this class and if it
#   has a default. e.g. "The parameter enc_ntp_servers must be set by the
#   External Node Classifier as a comma separated list of hostnames." (Note,
#   global variables should not be used in preference to class parameters  as of
#   Puppet 2.6.)
#
# === Examples
#
#  class { srv_elexis:
#    servers => [ 'pool.ntp.org', 'ntp.local.company.com' ]
#  }
#
# === Authors
#
# Niklaus Giger <niklaus.giger@member.fsf.org>
#
# === Copyright
#
# Copyright 2013 Niklaus Giger <niklaus.giger@member.fsf.org>
#

class srv_elexis::nginx {

  # /usr/share/nginx/html/index.html
  # /var/www/html
  #  volumes         => ['/var/lib/couchdb', '/var/log'],
  #volumes_from    => '6446ea52fbc9',
  include git
  git::config { 'user.name':
    value => 'Niklaus Giger',
  }

  git::config { 'user.email':
    value => 'niklaus.giger@member.fsf.org',
  }

  include docker
  docker::image { 'nginx':
    docker_file => '${docker_files}/nginx/Dockerfile',
#    notify => Docker::Run['nginx'],
  }
  include srv_elexis::config

  file {"/etc/nginx/ssl":
    ensure => directory,
    owner => root,
    group => root,
  }

  exec {'/etc/nginx/ssl/srv.elexis.info.cert':
    creates => "/etc/nginx/ssl/srv.elexis.info.cert",
    command => '/usr/bin/openssl req -days 1830 -subj "/C=CH/ST=Glarus/L=Mollis/O=Elexis Opensource community/CN=srv.elexis.info/EM=niklaus.giger@member.fsf.org" -nodes -new -x509  -keyout srv.elexis.info.key -out srv.elexis.info.cert',
    cwd     => '/etc/nginx/ssl',
    require => File['/etc/nginx/ssl'],
    notify => Docker::Image['nginx'],
  }

  file { "/etc/nginx/sites-available/jenkins.$::domain":
  content => "# $::srv_elexis::config::managed_note
# from https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins
# anderung zwei
server {
    listen 80;
    return 301 https://\$host\$request_uri;
}

server {

    listen 443;
    server_name  jenkins.$::domain;

    ssl_certificate_key /etc/nginx/ssl/srv.elexis.info.key;
    ssl_certificate     /etc/nginx/ssl/srv.elexis.info.cert;

    ssl on;
    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    access_log            /var/log/nginx/jenkins.access.log;

    location / {

      proxy_set_header        Host \$host;
      proxy_set_header        X-Real-IP \$remote_addr;
      proxy_set_header        X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto \$scheme;

      # Jenkins URL of configure must point to  https://jenkins.$::domain
      # Fix the 'It appears that your reverse proxy set up is broken' error.
      proxy_pass          http://jenkins.$::domain:8080;
      proxy_read_timeout  90;

      proxy_redirect      http://jenkins.$::domain:8080 https://jenkins.$::domain;
      proxy_redirect      http://localhost:8080 https://jenkins.$::domain;
    }
  }
",  require => [ Exec['/etc/nginx/ssl/srv.elexis.info.cert'], ],
    owner => root,
    group => root,
    backup => false, # we don't want to keep them, as nginx would read them, too
    notify => Docker::Image['nginx'],
  }

  file { '/etc/nginx/sites-available/default':
   content => "server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }
  }
"
  }
  file {          "/etc/nginx/sites-enabled/download.elexis.info":
    target => "/etc/nginx/sites-available/download.elexis.info",
    backup => false, # we don't want to keep them, as nginx would read them, too
    ensure => link,
    owner => root,
    group => root,
  }
  file {          "/etc/nginx/sites-enabled/default":
    ensure => absent,
    owner => root,
    group => root,
  }

  file { "/etc/nginx/sites-available/download.elexis.info":
  content => "# $::srv_elexis::config::managed_note
server {
  listen 80;
  server_name  download.$::domain
    ;
  root /home/jenkins/downloads;
  autoindex on;
  allow all;
}
",  owner => root,
    backup => false, # we don't want to keep them, as nginx would read them, too
    group => root,
    notify => Docker::Image['nginx'],
  }

}
